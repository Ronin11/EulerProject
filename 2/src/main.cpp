/**
* Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
* By starting with 1 and 2, the first 10 terms will be:
* 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
* By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
**/

#include <iostream>
#include <vector>
#include <numeric>

#define MAX 4000000

//Fibonacci Number Generator
int Fibonacci(int num){
	if(num == 0)
		return 0;
	else if(num == 1)
		return 1;
	else if(num == 2)
		return 2;
	int val = Fibonacci(num - 1) + Fibonacci(num - 2);
	if(val % 2 == 0)//We only want even Fibonacci numbers
		return val;
	else
		return 0;
}

//Function to control the generation of the Fibonacci Sequence
std::vector<int> get_Fibonacci_Sequence(){
	std::vector<int> data = std::vector<int>();
	data.push_back(0); //Make the vector not empty
	//Generate
	for(int i = 1; data.back() < MAX; i++)
		data.push_back(Fibonacci(i));
	data.pop_back();
	return data;
}

//Sum the sequence sith accumulate and print it.
int main(void){
	std::vector<int> numbers = get_Even_Fibonacci_Numbers();
	int answer = accumulate(numbers.begin(),numbers.end(),0);
	std::cout << "The answer is: " << answer << std::endl;
	return 0;
}